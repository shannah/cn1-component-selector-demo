package com.codename1.tests.stylebuilder;


import com.codename1.components.ToastBar;
import com.codename1.io.CSVParser;
import com.codename1.ui.Display;
import com.codename1.ui.Form;
import com.codename1.ui.Dialog;
import com.codename1.ui.Label;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.io.Log;
import com.codename1.ui.Button;
import com.codename1.ui.Calendar;
import com.codename1.ui.Command;
import com.codename1.ui.Component;
import com.codename1.ui.ComponentSelector;
import static com.codename1.ui.ComponentSelector.$;
import com.codename1.ui.Container;
import com.codename1.ui.FontImage;
import com.codename1.ui.TextField;
import com.codename1.ui.Toolbar;
import com.codename1.ui.animations.CommonTransitions;
import com.codename1.ui.animations.FlipTransition;
import com.codename1.ui.events.ActionEvent;
import com.codename1.ui.layouts.BorderLayout;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.ui.layouts.GridLayout;
import com.codename1.ui.plaf.Border;
import com.codename1.ui.plaf.Style;
import com.codename1.ui.table.TableLayout;

import java.io.IOException;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose 
 * of building native mobile applications using Java.
 */
public class StyleBuilderDemo {

    private Form current;
    private Resources theme;

    public void init(Object context) {
        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature, uncomment if you have a pro subscription
        // Log.bindCrashProtection(true);
    }
    
    public void start() {
        if(current != null){
            current.show();
            return;
        }
        showMainMenu();
       
    }

    public void stop() {
        current = Display.getInstance().getCurrent();
        if(current instanceof Dialog) {
            ((Dialog)current).dispose();
            current = Display.getInstance().getCurrent();
        }
    }
    
    public void destroy() {
    }

    int clickCount = 0;
    public void testComponentSelector() {
        Form f = new Form("ComponentSelector Test", new BoxLayout(BoxLayout.Y_AXIS));
        
        Button b = new Button("Test Selector");
        $(b).addTags("myButton");
        Container myContainer = new Container();
        b.addActionListener(e->{
           
            if (!$("Calendar").isVisible()) {
                $("Calendar, .to-hide, .myContainer > Label").fadeInAndWait(500);
            } else {
                $("Calendar, .to-hide, .myContainer > Label").fadeOutAndWait(500);
            }
            
            
        });
        f.add(b);
        Calendar c = new Calendar();
        
       
        $(myContainer).addTags("myContainer");
        Label myLabel = new Label("Foo");
        myContainer.add(myLabel);
        myContainer.add(new Label("Label 2"));
        myContainer.add(new Label("label 3"));
        myContainer.add(BoxLayout.encloseX(new Label("Label 4"), new Label("Label 5")));
        
        f.add(myContainer);
        
        String[] keys = new String[]{"Name", "Age", "Description", "Weight"};
        f.add(createTable(keys));
        $("#Name, #Age, #Description, #Weight", f).setDoneListener(e->{
            System.out.println("Action performed");
        });
        
        Button toHide = (Button)$(new Button("Will Be Hidden")).addTags("to-hide").asComponent();
Button hide = new Button("Hide It");
hide.addActionListener((e) -> {
    hide.setEnabled(false);
    boolean t = !toHide.isHidden();
    toHide.setHidden(t, true);
    toHide.getParent().animateLayoutFadeAndWait(200, 255);
    //toHide.setVisible(!t);
    hide.setEnabled(true);
});
        f.add(hide);
        f.add(toHide);
        f.add(c);
        f.add(new Button("After calendar"));
        f.show();
    }
    
    private Container createTable(String[] keys) {
        TableLayout tl = new TableLayout(keys.length, 2);
        Container table = new Container(tl);
        for (String key : keys) {
            table.add(new Label(key)).add($(new TextField()).setName(key).asComponent());
        }
        return table;
    }
    
    private void showMainMenu() {
        Form f = new Form("Component Selector Demo", new BorderLayout());
        
        applyToolbar(f);
        Button effects = $(new Button("Effects"))
                .setIcon(FontImage.MATERIAL_TEXTURE)
                .setTextPosition(Component.BOTTOM)
                .addTags("menu-button")
                .addActionListener(e->{
                    $(e).setEnabled(false);
                    $(".root-container").fadeOutAndWait(500);
                    $(e).setEnabled(true);
                    showEffectsForm();
                })
                .asComponent(Button.class);
        
        Button table = $(new Button("Table"))
                .setIcon(FontImage.MATERIAL_TEXTURE)
                .setTextPosition(Component.BOTTOM)
                .addTags("menu-button")
                .addActionListener(e->{
                    $(e).setEnabled(false);
                    $(".root-container").fadeOutAndWait(500);
                    $(e).setEnabled(true);
                    showTableDemo();
                })
                .asComponent(Button.class);
        
        f.add(BorderLayout.CENTER, 
                $(GridLayout.encloseIn(3, effects, table, new Label())).addTags("root-container").asComponent());
        
        f.addShowListener(e->{
            if (!$(".root-container").isVisible()) {
                $(".root-container").fadeIn();
            }
        });
        f.show();
    }
    
    private void showEffectsForm() {
        Form f = new Form("Effects", new BorderLayout());
        applyToolbar(f);
        Button fadeInFadeOut = $(new Button("Fade"))
                .setIcon(FontImage.MATERIAL_BLUR_ON, 4)
                .addActionListener(e->{
                    $(e).getParent().find(">*").fadeOutAndWait(1000).fadeInAndWait(1000);
                })
                .asComponent(Button.class);
        
        
        Button slideUp = $(new Button("Slide Up"))
                .setIcon(FontImage.MATERIAL_EXPAND_LESS)
                .addActionListener(e->{
                    $(e).getParent().find(">*").slideUpAndWait(1000).slideDownAndWait(1000);
                })
                .asComponent(Button.class);
        
       
        Button replace = $(new Button("Replace Fade/Slide"))
                .setIcon(FontImage.MATERIAL_REDEEM)
                .addActionListener(e->{
                    $(e).getParent()
                            .find(">*")
                            .replaceAndWait(c->{
                                return $(new Label("Replacement"))
                                        .putClientProperty("origComponent", c)
                                        .asComponent();
                            }, CommonTransitions.createFade(1000))
                            .replaceAndWait(c->{
                                Component orig = (Component)c.getClientProperty("origComponent");
                                if (orig != null) {
                                    c.putClientProperty("origComponent", null);
                                    return orig;
                                }
                                return c;
                                
                            }, CommonTransitions.createCover(CommonTransitions.SLIDE_HORIZONTAL, false, 1000));
                    
                            
                })
                .asComponent(Button.class);
        
        
        Button replaceFlip = $(new Button("Replace Flip"))
                .setIcon(FontImage.MATERIAL_REDEEM)
                .addActionListener(e->{
                    $(e).getParent()
                            .find(">*")
                            .replaceAndWait(c->{
                                return $(new Label("Replacement"))
                                        .putClientProperty("origComponent", c)
                                        .asComponent();
                            },new FlipTransition(0xffffff, 1000))
                            .replaceAndWait(c->{
                                Component orig = (Component)c.getClientProperty("origComponent");
                                if (orig != null) {
                                    c.putClientProperty("origComponent", null);
                                    return orig;
                                }
                                return c;
                                
                            },new FlipTransition(0xffffff, 1000));
                    
                            
                })
                .asComponent(Button.class);
        
        Container root = GridLayout.encloseIn(3, fadeInFadeOut, slideUp, replace, replaceFlip);
        f.addComponent(BorderLayout.CENTER, root);
        f.show();
    }
    
    
    
    private void showTableDemo() {
        Form f = new Form("Table Demo", new BorderLayout());
        applyToolbar(f);
        CSVParser parser = new CSVParser();
        String[][] data = null;
        try {
            data =   parser.parse(Display.getInstance().getResourceAsStream(null, "/sample-data.csv"));
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        if (data== null) {
            ToastBar.showMessage("Failed to parse sample data", FontImage.MATERIAL_INFO);
            return;
        }
        int numRows = data.length;
        int numCols = data[0].length;
        TableLayout tl = new TableLayout(numRows, numCols);
        Container table = new Container(tl);
        int rowNum = 0;
        int colNum = 0;
        for (String[] row : data) {
            colNum = 0;
            for (String cell : row) {
                table.add(
                        tl.createConstraint(rowNum, colNum), 
                        $(new Button(cell))
                                .setUIID("Label")
                                .addTags("cell", "row-"+rowNum, "col-"+colNum, rowNum%2==0 ? "even":"odd")
                                .putClientProperty("row", rowNum)
                                .putClientProperty("col", colNum)
                                .asComponent()
                            
                );
                colNum++;
            }
            rowNum++;
        }
        
        
        $(".cell", table).setMargin(0).setPadding(0)
                .addActionListener(e->{
                    // Action listener in each cell so that we can highlight the 
                    // selected row
                    Component cell = (Component)e.getSource();
                    int row = (int)cell.getClientProperty("row");
                    int col = (int)cell.getClientProperty("col");
                    
                    // Restore the style of the previously selected row
                    // and remove the selected-row tag
                    $(e).getParent().find(">.selected-row")
                            .each(c->{
                                // Restore the old style that we stored when we made
                                // the row selected originally (see below)
                                c.setUnselectedStyle((Style)c.getClientProperty("default-style"));
                            })
                            .removeTags("selected-row")
                            .getParent()
                            .repaint();
                    
                    // Now add the "selected-row" tag, and modify the styles
                    $(e).getParent().find(">.row-"+row).addTags("selected-row")
                            .each(c->{
                                // Store the existing style so that we can 
                                // reapply it when the row becomes unselected
                                Style oldStyle = new Style(c.getStyle());
                                c.putClientProperty("default-style", oldStyle);
                            })
                            .setBgColor(0x89cff0)
                            .setFgColor(0xffffff)
                            .setBgTransparency(255)
                            .getParent()
                            .repaint();
                });
        
        // Add striping to the table  (make the even rows gray)
        $(".even", table)
            .setBgColor(0xcccccc)
            .setBgTransparency(255);
        
        
        
        
        f.addComponent(BorderLayout.CENTER, $(BoxLayout.encloseY(table)).setScrollableY(true).asComponent());
        
        f.show();
    }
    
    private void applyToolbar(Form f) {
        String title = f.getTitle();
        Toolbar tb = new Toolbar();
        f.setToolbar(tb);
        tb.setTitle(title);
        final Form backForm = Display.getInstance().getCurrent();
        if (backForm != null) {
            tb.setBackCommand(new Command("Back") {
                public void actionPerformed(ActionEvent e) {
                    backForm.showBack();
                }
            });
        }
        
    }
    
}
